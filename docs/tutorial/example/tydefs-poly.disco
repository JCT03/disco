import list

type Tree a = Unit + (a * Tree * Tree)

treeFold : b * (a * b * b -> b) * Tree a -> b
treeFold (z, f, left ()) = z
treeFold (z, f, right (a, l, r)) = f(a, treeFold(z,f,l), treeFold(z,f,r))

sumTree : Tree Nat -> Nat
sumTree(t) = treeFold(0, \p. {? a+l+r when p is (a,l,r) ?}, t)

flattenTree : Tree a -> List a
flattenTree(t) = treeFold([], \p. {? append l (append [a] r) when p is (a,l,r) ?}, t)