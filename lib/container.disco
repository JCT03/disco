using NoStdLib

import list
import product

||| The size of a set, i.e. the number of (distinct) elements it contains.

!!! size({}) == 0
!!! size({1,2,3}) == 3
!!! forall s1 : Set(N), s2 : Set(N). size(s1 union s2) <= size(s1) + size(s2)

size : Set(a) -> N
size(s) = length(list(s))

||| The size of a bag, i.e. the number of elements it contains (counting multiplicity).
!!! bagSize(bag([])) == 0
!!! bagSize(bag([1,2,3])) == 3
!!! bagSize(bag([1,1,2,3,3,3])) == 6
!!! bagSize(⟅1 # 1000000, 2 # 990482⟆) == 1990482
bagSize : Bag(a) -> N
bagSize(b) = foldr(\((_,n), s). n + s, 0, list(bagCounts(b)))

reducebag : (a × a → a) × a × Bag(a) → a
reducebag(f,z,b) = foldr(f,z,list(b))

reduceset : (a × a → a) × a × Set(a) → a
reduceset(f,z,s) = foldr(f,z,list(s))

unions : Set(Set(a)) → Set(a)
unions(ss) = foldr(~∪~, {}, list(ss))
